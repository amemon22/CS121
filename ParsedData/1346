BiographyResearchPublication
				Others
		
	
	
		
			
				
				
					Research
					
						
							
								
							
							
								 05/2014-11/2014, ScaleJ: language and runtime system support for developing scalable Big Data applications  
								 Superviser: Prof. Harry Xu,
								Donald Bren School of Information and Computer Sciences, 
								University of California, Irvine 
								Brief Description:
								Scalability issues are still common in real systems, and many of these issues stem from the poor performance of 
								data processing tasks on each node of the cluster (i.e. slave programs). Since a data processing task loads and manipulates
								a very large amount of data, its execution is often under great memory pressure, loading to excessive GC effort and 
								out-of-memory errors.
								
								
								To attack this ignored yet important problem, we propose a new Java-like language named ScaleJ as well as an auto-tuning 
								runtime system that can help a data-parallel task survive memory pressure. Our results show that
								(1) ScaleJ is easy to use; (2) ScaleJ programs are much more efficient and scalable than their Java counterparts 
								(e.g., 3x faster and scale to 24x larger datasets). 
								
								
										A paper is under submission.
									
								
							
						
						
							
								
							
							
								 05/2013-05/2014, Facade: a compiler and runtime support for (almost) object-bounded Big Data applications  
								 Superviser: Prof. Harry Xu,
								Donald Bren School of Information and Computer Sciences, 
								University of California, Irvine 
								Brief Description:
								The use of managed languages makes programming easier, but their automated memory management comes at a cost. 
								When object-orientation meets Big Data, this cost is significantly magnified and becomes a scalability-prohibiting bottleneck.
								
								
								We propose a novel compiler framework as well as runtime support, called Facade, that can generate highly-efficient data manipulation 
								code by automatically transforming data path of an existing Big Data application. 
								The key to efficiency is that in the generated code, 
								the number of runtime heap objects created for data types in each thread is statically bounded, leading to significantly reduced
								memory management cost and improved scalability.  We have implemented Facade and used it to transform 7 common applications on
								3 real-world (already well-optimized) Big Data frameworks:
								GraphChi, Hyracks, and GPS. Our experimental results are very positive: the generated programs have (1) achieved a 5%--50%
								execution time reduction and a 5--13x GC reduction; (2) consumed up to 50% less memory, and (3) scaled to much larger datasets.
								
								
										A paper is accepted in ASPLOS'15.
									
								
							
						
						
							
								
							
							
								 09/2012-07/2014, Performance Problem Amplifier  
								 Superviser: Prof. Harry Xu,
								Donald Bren School of Information and Computer Sciences, 
								University of California, Irvine 
								Brief Description:
								Performance problems in a large-scale application are extremely
								difficult to find. Traditional performance test oracles such as
								time/memory checks are coarse-grained and subjective; as a result,
								performance bugs often escape to production runs, hurting
								software reliability and user experience. 
								
								
								In this project, we focus on  
								a class of performance problems whose symptoms can be described by logical
								statements over a history of heap updates. We propose
								a general technique that can amplify the effects of this kind of performance bugs
								as well as provide precise
								diagnostic information. Amplification serves as an automated
								test oracle because it increases memory consumption significantly
								for tests that trigger performance problems while having a very
								small impact on bug-free runs. As a result, developers can easily
								divide tests into successful and failing runs, and focus their effort
								on failing tests. Using the diagnostic precise information (such as reference paths)
								which is provided by our tool, developers can easily identify the root causes
								of performance problems.
								
								
										A paper is under submission.
									
								
										This work was presented at the
										 
											SoCal PLS WorkShop Spring'2014
										 
										at Harvey Mudd College.
										Download Slides
									
								
							
						
						
							
								
							
							
								 03/2011-06/2012, APIExample: An
									Effective Usage Example Recommendation System
									for Java APIs  
								 Superviser: Dr. Lijie Wang,
								Software Engineering Institute, Peking University 
								Brief Description:
								APIExample is an effective web search based usage example
								recommendation system for java APIs (Here we use API to
								represent java classes). It automatically identifies and
								extracts usage examples (containing both code snippet and
								readable descriptive texts) from various web pages on the
								Internet. Based on in-depth analysis on the collected examples,
								APIExample provides API's usage related information in multiple
								aspects to programmers. With the help of APIExample, a
								programmer can capture a full view on the usage of target API
								and thus learn about the API efficiently. The tool provides two
								kinds of user interaction style: a web search portal and an
								Eclipse plug-in. 
								A paper about the preliminary implementation of the
										tool was published on the Tool Demo Track of 
										
											ASE'2011
										.
										Download PDF
									A paper about an exploratory study of usage examples on the web was published on the Research Track of 
										
											APSEC'2012
										.
										Download PDF
									
							
						
						
							
								
							
							
								 01/2011-05/2012, Automatic
									Tagging for Web Services 
									 
									Superviser: Prof. Junfeng Zhao, Software
								Engineering Institute, Peking University 
								Brief Description:
								Existing web service tags are annotated manually, and manual
								tagging is time-consuming and expensive. The approach exploits
								WSDL documents and additional information, extracts semantic and
								syntactic information, and annotates web services automatically.
								These tags can support web service understanding, categorizing
								and discovering, which are important tasks in a service-oriented
								software system.
								A paper about automatic tagging for Web Services was
										published on the Industry Track of 
										
											ICWS'2012
										.
										Download PDF
									
							
						
						
						
						
					
				
				
			
			
		
		
	
	
	

		 Lu Fang, Donald Bren School of Information and Computer
		Sciences, University of California, Irvine  Last update:
		11/20/2014